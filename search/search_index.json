{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"NodeJS","text":""},{"location":"#nodejs","title":"Nodejs","text":""},{"location":"#how-to-handle-concurrency-in-nodejs","title":"How to handle concurrency in NodeJS?","text":"<ul> <li>Nodejs can support concurrency by concept of event, callbacks, Promises and async/await.</li> <li>Nodejs uses an event loop to maintain concurrency and perform non-blocking I/O operations.</li> </ul>"},{"location":"#what-is-event-loop","title":"What is Event Loop?","text":"<p>The event loop allows nodejs to perform non-blocking I/O operations.</p> <ul> <li>Event loop is an endless loop, which waits for tasks, executes them and then sleeps until it receives more tasks.</li> <li>Event loop execute tasks from event queue only when call stack is empty.</li> <li>Event loop allow us to use callbacks and promises.</li> </ul>"},{"location":"#what-is-callback-hell","title":"What is callback hell?","text":"<ul> <li>The asynchronous function requires callbacks as a return parameter.</li> <li>When multiple asynchronous functions are chained together then callback hell situation comes up.</li> </ul> <pre><code>getData(function(a){\n    getMoreData(a, function(b){\n        getMoreData(b, function(c){ Reactor Pattern in Node.js\n            getMoreData(c, function(d){\n                getMoreData(d, function(e){\n                    ...\n                });\n            });\n        });\n    });\n});\n</code></pre>"},{"location":"#what-is-preflight-request","title":"What is preflight request?","text":"<ul> <li>A preflight request is a CORS request that checks to see if the CORS protocol is understood.</li> <li>Preflight is a OPTIONS request.</li> </ul>"},{"location":"#use-of-options-method-in-http","title":"Use of options method in http?","text":"<ul> <li>HTTP OPTIONS method is used to request information about the communication options available for the target resource.</li> <li>Response include an header indicating allowed HTTP methods on the resource.</li> <li>HTTP OPTIONS request is automatically issued by browser.</li> </ul>"},{"location":"#what-is-cors","title":"What is CORS?","text":"<ul> <li>CORS means cross origin resource sharing.</li> <li>It is a security feature that allows the webapplications from one domain to request the resources like API's from other domain</li> <li>CORS works by adding http headers to control which origins have accesss to the resource and under what condition.</li> </ul>"},{"location":"#what-is-packagejson-file","title":"What is package.json file?","text":"<ul> <li>The package.json is a metadata file that contains information about project, such as name, description and most important dependencies.</li> <li>File used to managing project modules, scripts, version control.</li> <li>File is used by npm to install, manage, update dependencies.</li> </ul>"},{"location":"#what-is-packagelockjson-file","title":"What is package.lock.json file?","text":"<ul> <li>The package.lock.json file that npm generates after installing packages.</li> <li>This file contain details description of dependencies, including versions and dependencies of dependencies.</li> </ul>"},{"location":"#what-is-authrentication-vs-authorization","title":"What is authrentication vs authorization?","text":"<ul> <li>Authentication: is the process of verifying who the user is.</li> <li>Authorization: is the process of verifying what they have access to. What files and data user has access to.</li> </ul>"},{"location":"#what-is-jwt","title":"What is JWT?","text":"<ul> <li>JWT (JSON Web Token) is an open standard that defines a compact and self-contained way for securily transfer information as JSON object.</li> <li>JWT token can be trusted because it is digitaly signed.</li> </ul>"},{"location":"#how-to-build-a-microservices-architecture","title":"How to build a microservices architecture?","text":"<ul> <li>Microservices are many small services responsible for one functionality.</li> </ul>"},{"location":"#what-are-the-middleware-functions","title":"What are the middleware functions?","text":"<ul> <li>Functions that have access to the request object (req), the response object (res) and the next function.</li> <li>Middleware can</li> <li>Execute any code</li> <li>Make changes to the request and response</li> <li>End the request-response cycle</li> <li>Call the next middleware in the stack</li> </ul>"},{"location":"#how-to-handle-cache-in-nodejs","title":"How to handle cache in Nodejs?","text":"<ul> <li>Cache is used to store frequently accessed data in the temporary storage.</li> <li>Redis is used to cache data in Nodejs</li> </ul>"},{"location":"#in-microservice-architecture-what-are-the-different-ways-to-communicate-between-services","title":"In microservice architecture what are the different ways to communicate between services?","text":""},{"location":"#in-api-i-have-3-database-queries-2-seconds-response-each-and-api-takes-6-deconds-to-execute-how-we-can-optimize-this","title":"In API I have 3 database queries 2 seconds response each and API takes 6 deconds to execute. How we can optimize this?","text":""},{"location":"#nodejs-is-single-threaded-can-i-make-main-thread-as-multithread","title":"Nodejs is single threaded. Can I make main thread as multithread?","text":""},{"location":"#what-is-test-driven-development-tdd","title":"What is Test Driven Development (TDD)?","text":"<ul> <li>TDD is a software development approach where tests are written before the actual code.</li> </ul>"},{"location":"#what-is-behaviour-driven-development-bdd","title":"What is Behaviour-Driven Development (BDD)?","text":""},{"location":"#serverless","title":"Serverless","text":""},{"location":"#advantages-and-disadvantages-of-lambda","title":"Advantages and Disadvantages of Lambda?","text":""},{"location":"#what-is-cold-start-in-lambda","title":"What is cold start in lambda?","text":""},{"location":"#what-is-lambda-layer","title":"What is lambda layer?","text":"<ul> <li>Layers usually contain library dependencies, a custom runtime, or configuration files.</li> <li>Layers can be used to reduce size of deployment, separate core function logic, share dependencies, lambda console code editor.</li> </ul>"},{"location":"#cloud-services","title":"Cloud Services","text":""},{"location":"#messaging-queues","title":"Messaging queues","text":""},{"location":"#cicd-tools","title":"CICD Tools","text":""},{"location":"database/","title":"Database","text":""},{"location":"database/#database","title":"Database","text":""},{"location":"database/#what-is-index","title":"What is index?","text":""},{"location":"database/#drawbacks-of-indexes","title":"Drawbacks of indexes?","text":""},{"location":"database/#mongodb","title":"Mongodb","text":""},{"location":"database/#can-we-create-relations-in-mongodb-and-how","title":"Can we create relations in mongodb and how?","text":""},{"location":"database/#mysql","title":"MySQL","text":""},{"location":"database/#what-is-aggregation","title":"What is aggregation?","text":""},{"location":"database/#difference-between-while-and-having","title":"Difference between WHILE and HAVING?","text":""},{"location":"htmlcss/","title":"Htmlcss","text":""},{"location":"htmlcss/#html","title":"HTML","text":""},{"location":"htmlcss/#what-is-event-bubbling","title":"What is event bubbling?","text":"<ul> <li>Event bubbling is a type of event propagation.</li> <li>Where the event first triggers on the innermost target element.</li> <li>Then triggers on parents of the target element in the same nesting hierachy.</li> <li>Till it reaches the outermost DOM element.</li> </ul>"},{"location":"htmlcss/#what-is-event-capturing","title":"What is event capturing?","text":"<ul> <li>Event capturing is a type of event propagation.</li> <li>Where is event first capture by the outermost element.</li> <li>Then successively triggers on the children of the target element in the same nest hierachy.</li> <li>Till it reaches the innermost DOM element.</li> </ul>"},{"location":"htmlcss/#css","title":"CSS","text":""},{"location":"htmlcss/#what-is-selector-nesting-in-scssless","title":"What is selector nesting in SCSS/LESS?","text":""},{"location":"javascript/","title":"Javascript","text":""},{"location":"javascript/#javascript","title":"Javascript","text":""},{"location":"javascript/#what-is-difference-between-map-and-foreach","title":"What is difference between map() and forEach()?","text":"<ul> <li>ap method will return a new array with transformed values.</li> <li>forEach method does not return a new array.</li> </ul>"},{"location":"javascript/#what-are-the-differences-between-call-apply-and-bind","title":"What are the differences between call(), apply() and bind()?","text":"<ul> <li>Call and Apply method will invokes function immediately with given this value.</li> <li>Call method allow us to pass arguments with comma separator (one by one).</li> <li>Apply method allow us to pass the arguments as an array.</li> <li>Bind method will return a new function with given this value and arguments which can be invoked later.</li> </ul>"},{"location":"javascript/#what-is-spread-operator","title":"What is spread operator?","text":"<ul> <li>Spread operator is used to expand the elements of an array into individual elements.</li> </ul> <pre><code>// Concatenation arrays\nlet x = [1, 2];\nlet y = [3, 4];\n\nlet z = [...x, ...y]; // [1, 2, 3, 4]\n\n// Copy arrays of objects\nlet a = [...x]; // [1, 2]\n\nlet obj = { x: 1, y: 2 };\n\nlet obj_copy = { ...obj }; // { x: 1, y: 2 }\n\n// Pass array of values as function arguments\nfunction example(arg1, arg2) {\n  console.log(arg1, arg2);\n}\n\ncreateExample(...a);\n</code></pre>"},{"location":"javascript/#what-is-rest-operator","title":"What is rest operator?","text":"<ul> <li>Rest operator is used to pass multiple elements into single array or object.</li> <li>This is used when we don't know how many parameters a function may receive and you can capture all of them as an array.</li> </ul> <pre><code>function example(...args) {\n  console.log(args);\n}\n\nexample(1, 2, 3, 4); // [1, 2, 3, 4]\n</code></pre>"},{"location":"javascript/#what-is-destructuring","title":"What is destructuring?","text":"<ul> <li>It is introduced in es6.</li> <li>It allows us to assign the object properties and array values to variables.</li> </ul> <pre><code>const user = {\n    \"age\": 10,\n    \"name\": \"Maninder\"\n}\n\nconst { age, name as firstName } = user;\nconsole.log(age, firstName); // 10, Maninder\n\nconst [a, b] = [1, 2];\nconsole.log(a, b); // 1, 2\n</code></pre>"},{"location":"javascript/#what-is-a-closure","title":"What is a closure?","text":"<ul> <li>Closure is a funcation which will return another function along with outer function environment.</li> </ul> <pre><code>function Outer() {\n  var a = 10;\n  function Inner() {\n    console.log(a);\n  }\n  return Inner;\n}\n\nvar Close = Outer();\nClose();\n</code></pre>"},{"location":"javascript/#oops","title":"OOPS","text":""},{"location":"javascript/#_1","title":"Javascript","text":""},{"location":"problems/","title":"Problems","text":""},{"location":"problems/#write-a-program-to-print-matrix","title":"Write a program to print matrix","text":"<pre><code>1 2 3\n4 5 6\n7 8 9\n</code></pre>"},{"location":"problems/#write-a-program-to-print-matrix_1","title":"Write a program to print matrix","text":"<pre><code>1 5 9\n2 6 10\n3 7 11\n4 8 12\n</code></pre>"},{"location":"problems/#write-a-function-that-returns-boolean-truefalse-based-on-whether-or-not-the-argument-passed-to-it-is-an-armstrong-number","title":"Write a function that returns boolean 'true'/'false' based on whether or not the argument passed to it is an Armstrong number.","text":"<pre><code>/* Definition of an Armstrong Number:\nA number where the sum of its own digits raised to the power of number of digits (n) is equal to same number\n\nExample : n = 153\nThe number of digits is 3 (n = 3) here.\nSo, the sum of digits raised to the power of 3=\n1^3 + 5^3 + 3^3 = 1 + 125 + 27 = 153\nsum is equal to input number 153.\nSo, in this case the function should return true*/\n</code></pre>"},{"location":"problems/#console-output-of-code","title":"Console output of code","text":"<pre><code>let a = true;\nsetTimeout( () =&gt; a = false, 100);\nwhile(a) { console.log(a) }\nconsole.log(\u201cscript ended\u201d);\n</code></pre>"},{"location":"problems/#complete-the-function","title":"Complete the function","text":"<pre><code>/*\nArrayAdditionI(arr) take the array of numbers stored in arr and return the string true if any combination of numbers in the array can be added up to equal the largest number in the array, otherwise return the string false.\n\nFor example:\nif arr contains [4, 6, 23, 10, 1, 3] the output should return true because 4 + 6 + 10 + 3 = 23.\nThe array will not be empty, will not contain all the same elements, and may contain negative numbers\n*/\n\nfunction ArrayAdditionI(arr) {\n    // Write code here...\n}\n\nconsole.log(\"-----\");\nconsole.log(ArrayAdditionI([1,2,3,5,4])); // ==&gt; true\nconsole.log(ArrayAdditionI([21,10,12,9,2])); // ==&gt; true\nconsole.log(ArrayAdditionI([4,6,23,10,1,3])); // ===&gt; true\nconsole.log(ArrayAdditionI([5,7,16,1,2])); // ===&gt; false\nconsole.log(ArrayAdditionI([3,5,-1,8,12])); // ===&gt; true\n</code></pre>"},{"location":"problems/#node-js-age-counting-challenge","title":"Node JS Age Counting Challenge","text":"<pre><code>// As per response of get call count the total number of ages who has age value above or equal to 50.\n\nconst https = require('https');\nhttps.get('https://coderbyte.com/api/challenges/json/age-counting', (resp) =&gt; {\n    // Write code here...\n})\n</code></pre>"},{"location":"reactjs/","title":"ReactJS","text":""},{"location":"reactjs/#reactjs","title":"ReactJS","text":""},{"location":"reactjs/#what-is-server-side-rendering-ssr","title":"What is Server-Side Rendering (SSR)?","text":"<ul> <li>Pre-render content on the server to improve initial page load times and enhance SEO.</li> </ul>"},{"location":"reactjs/#how-to-bundle-react-app-webpack-or-default","title":"How to bundle react app? (Webpack or Default?)","text":""},{"location":"reactjs/#what-is-code-splitting","title":"What is code splitting?","text":"<ul> <li>Break down large bundles into smaller chunks to reduce initial load times.</li> </ul>"},{"location":"reactjs/#what-is-lazy-loading","title":"What is lazy loading?","text":"<ul> <li>It is a technique used to improve the performance by splitting the code into small chunks.</li> <li>Load component only when its required instead of loading on initial load.</li> </ul> <pre><code>import React, { lazy, Suspense } from \"React\";\n\nconst LazyComponent = lazy(() =&gt; import(\"./LazyComponent\"));\n\nfunction App() {\n  return (\n    &lt;div&gt;\n      &lt;Suspense fallback={&lt;div&gt;Loading...&lt;/div&gt;}&gt;\n        &lt;LazyComponent /&gt;\n      &lt;/Suspense&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre>"},{"location":"reactjs/#what-is-suspense-in-react","title":"What is suspense in React?","text":"<ul> <li>Lazy loading components are wrapped by Suspense.</li> <li>Suspense component receives a fallback prop which is displayed until the lazy loading component in rendered.</li> </ul>"},{"location":"reactjs/#what-are-higher-order-components","title":"What are higher order components?","text":"<ul> <li>HOC is a function which takes the component as an argument and returns a new component that wraps the original component.</li> </ul>"},{"location":"reactjs/#what-is-usememo","title":"What is useMemo?","text":"<ul> <li>useMemo is useful for performance optimization.</li> <li>It is used to cache the result of a function between re-renders.</li> </ul>"},{"location":"reactjs/#what-is-usecallback","title":"What is useCallback?","text":"<ul> <li>useCallback is useful for performance optimization.</li> <li>It is used to cache the function defination between re-renders.</li> </ul>"},{"location":"reactjs/#what-are-refs","title":"What are Ref's?","text":"<ul> <li>Ref's are the way to access the dom elements created in the render method.</li> <li>They are helpful when we want to update the component without using state and props.</li> </ul>"},{"location":"reactjs/#what-are-forward-ref","title":"What are forward ref?","text":"<ul> <li>Forward ref is a technique which is used to send the ref from parent component to one of its children.</li> <li>This is helpful when we want to access the child component dom node from the parent component.</li> </ul> <pre><code>// ChildComponent.jsx\nimport React, { forwardRef } from \"react\";\n\nconst ChildComponent = forwardRef((props, ref) =&gt; {\n    return &lt;input ref={ref} /&gt;\n})\n\nexport default ChildComponent;\n\n// ParentComponent.jsx\nimport React, { useRef} from \"react\";\nimport ChildComponent from \"./ChildComponent\";\n\nconst ParentComponent() {\n    const inputRef = useRef(null);\n\n    return (\n        &lt;div&gt;\n            &lt;ChildComponent ref={inputRef} /&gt;\n            &lt;button onClick={() =&gt; inputRef.current.focus()}&gt;Focus&lt;/button&gt;\n        &lt;/div&gt;\n    )\n}\n\nexport default ParentComponent;\n</code></pre>"},{"location":"reactjs/#what-is-props-drilling","title":"What is props drilling?","text":"<ul> <li>Props drilling is the process of sending the data from one component to other component.</li> </ul>"},{"location":"reactjs/#what-are-the-disadvantages-of-props-drilling","title":"What are the disadvantages of props drilling?","text":"<ul> <li>Code complexity: It make code difficult to read and maintain.</li> <li>Risk of errors</li> <li>Performance: Makes application slower.</li> <li>We can avoid props drilling by using context api or Redux or any state management libraries.</li> </ul>"},{"location":"reactjs/#what-are-the-different-ways-to-pass-data-from-child-component-to-parent-component","title":"What are the different ways to pass data from child component to parent component?","text":"<ul> <li>Callback functions</li> <li>Context API</li> <li>React Hooks (useRef)</li> <li>Redux</li> </ul>"},{"location":"reactjs/#redux","title":"Redux","text":""},{"location":"reactjs/#what-are-reducers","title":"What are reducers?","text":""},{"location":"reactjs/#can-we-dispatch-an-action-in-reducer","title":"Can we dispatch an action in reducer?","text":""}]}