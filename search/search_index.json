{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Nodejs","text":""},{"location":"#how-to-handle-concurrency-in-nodejs","title":"How to handle concurrency in NodeJS?","text":"<ul> <li>Nodejs can support concurrency by concept of event, callbacks, Promises and async/await.</li> <li>Nodejs uses an event loop to maintain concurrency and perform non-blocking I/O operations.</li> </ul>"},{"location":"#what-is-event-loop","title":"What is Event Loop?","text":"<p>The event loop allows nodejs to perform non-blocking I/O operations.</p> <ul> <li>Event loop is an endless loop, which waits for tasks, executes them and then sleeps until it receives more tasks.</li> <li>Event loop execute tasks from event queue only when call stack is empty.</li> <li>Event loop allow us to use callbacks and promises.</li> </ul>"},{"location":"#what-is-callback-hell","title":"What is callback hell?","text":"<ul> <li>The asynchronous function requires callbacks as a return parameter.</li> <li>When multiple asynchronous functions are chained together then callback hell situation comes up.</li> </ul> <pre><code>getData(function(a){\n    getMoreData(a, function(b){\n        getMoreData(b, function(c){ Reactor Pattern in Node.js\n            getMoreData(c, function(d){ \n                getMoreData(d, function(e){ \n                    ...\n                });\n            });\n        });\n    });\n});\n</code></pre>"},{"location":"#what-is-packagejson-file","title":"What is package.json file?","text":"<ul> <li>The package.json file in Nodejs projects contains valuable information, such as project metadata and dependencies.</li> <li>File used to managing project modules, scripts, version control.</li> </ul>"},{"location":"#what-is-jwt","title":"What is JWT?","text":"<ul> <li>JWT (JSON Web Token) is an open standard that defines a compact and self-contained way for securily transfer information as JSON object.</li> <li>JWT token can be trusted because it is digitaly signed.</li> </ul>"},{"location":"#how-to-build-a-microservices-architecture","title":"How to build a microservices architecture?","text":"<ul> <li>Microservices are many small services responsible for one functionality.</li> </ul>"},{"location":"#what-are-the-middleware-functions","title":"What are the middleware functions?","text":"<ul> <li>Functions that have access to the request object (req), the response object (res) and the next function.</li> <li>Middleware can<ul> <li>Execute any code</li> <li>Make changes to the request and response</li> <li>End the request-response cycle</li> <li>Call the next middleware in the stack</li> </ul> </li> </ul>"},{"location":"#how-to-handle-cache-in-nodejs","title":"How to handle cache in Nodejs?","text":"<ul> <li>Cache is used to store frequently accessed data in the temporary storage.</li> <li>Redis is used to cache data in Nodejs</li> </ul>"},{"location":"#serverless","title":"Serverless","text":""},{"location":"#advantages-and-disadvantages-of-lambda","title":"Advantages and Disadvantages of Lambda","text":""},{"location":"problems/","title":"Problems","text":""},{"location":"problems/#write-a-program-to-print-matrix","title":"Write a program to print matrix","text":"<pre><code>1 2 3\n4 5 6\n7 8 9\n</code></pre>"},{"location":"problems/#write-a-program-to-print-matrix_1","title":"Write a program to print matrix","text":"<pre><code>1 5 9\n2 6 10\n3 7 11\n4 8 12\n</code></pre>"},{"location":"problems/#write-a-function-that-returns-boolean-truefalse-based-on-whether-or-not-the-argument-passed-to-it-is-an-armstrong-number","title":"Write a function that returns boolean 'true'/'false' based on whether or not the argument passed to it is an Armstrong number.","text":"<pre><code>/* Definition of an Armstrong Number:\nA number where the sum of its own digits raised to the power of number of digits (n) is equal to same number\n\nExample : n = 153\nThe number of digits is 3 (n = 3) here.\nSo, the sum of digits raised to the power of 3=\n1^3 + 5^3 + 3^3 = 1 + 125 + 27 = 153\nsum is equal to input number 153.\nSo, in this case the function should return true*/\n</code></pre>"},{"location":"problems/#console-output-of-code","title":"Console output of code","text":"<pre><code>let a = true;\nsetTimeout( () =&gt; a = false, 100);\nwhile(a) { console.log(a) }\nconsole.log(\u201cscript ended\u201d);\n</code></pre>"},{"location":"problems/#complete-the-function","title":"Complete the function","text":"<pre><code>/*\nArrayAdditionI(arr) take the array of numbers stored in arr and return the string true if any combination of numbers in the array can be added up to equal the largest number in the array, otherwise return the string false.\n\nFor example:\nif arr contains [4, 6, 23, 10, 1, 3] the output should return true because 4 + 6 + 10 + 3 = 23.\nThe array will not be empty, will not contain all the same elements, and may contain negative numbers\n*/\n\nfunction ArrayAdditionI(arr) {\n    // Write code here...\n}\n\nconsole.log(\"-----\");\nconsole.log(ArrayAdditionI([1,2,3,5,4])); // ==&gt; true\nconsole.log(ArrayAdditionI([21,10,12,9,2])); // ==&gt; true\nconsole.log(ArrayAdditionI([4,6,23,10,1,3])); // ===&gt; true\nconsole.log(ArrayAdditionI([5,7,16,1,2])); // ===&gt; false\nconsole.log(ArrayAdditionI([3,5,-1,8,12])); // ===&gt; true\n</code></pre>"},{"location":"problems/#node-js-age-counting-challenge","title":"Node JS Age Counting Challenge","text":"<pre><code>// As per response of get call count the total number of ages who has age value above or equal to 50.\n\nconst https = require('https');\nhttps.get('https://coderbyte.com/api/challenges/json/age-counting', (resp) =&gt; {\n    // Write code here...\n})\n</code></pre>"}]}